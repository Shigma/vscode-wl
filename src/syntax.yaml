name: Wolfram Language

scopeName: source.wolfram

firstLineMatch: ^#!/usr/bin/env wolframscript *$

variables:
  alnum: '[0-9a-zA-Z]'
  number: (?:\d+\.?|\.\d)\d*
  symbol: '[$a-zA-Z]+[$0-9a-zA-Z]*'
  identifier: (?:{{symbol}}`)*{{symbol}}
  pattern_ending: '[:-]>|:?=|\/[;.\/]|[\]\)\},;&]|>>|<<|[\n\r]'

  escaped_character: \\[ !"%&()*+/@\\^_`bfnrt<>]
  encoded_character: \\[0-7]{3}|\\\.[0-9A-Fa-f]{2}|\\:[0-9A-Fa-f]{4}
  regexp_character: .|\\\\[\S]|{{escaped_character}}|{{encoded_character}}

  balanced_braces: ([^{}]+|\{(?>\g<-1>)*\})*
  balanced_parens: ([^()]+|\((?>\g<-1>)*\))*
  balanced_brackets: ([^\[\]]+|\[(?>\g<-1>)*\])*

  character_class: alnum|alpha|ascii|blank|cntrl|digit|graph|lower|print|punct|space|upper|word|xdigit
  numeric_constants: Catalan|Degree|E|EulerGamma|Glaisher|GoldenAngle|GoldenRatio|I|Khinchin|MachinePrecision|Pi

patterns:
  - include: '#expressions'

contexts:
  expressions:
    - include: '#declarations'
    - include: '#patterns'
    - include: '#no-pattern'
  
  no-pattern:
    - include: '#newline-escape'
    - include: '#comments'
    - include: '#literals'
    - include: '#shorthand'
    - include: '#operators'
    - include: '#functions'
    - include: '#variables'
    - include: '#nested'

  newline-escape:
    - match: \\\r?\n
      name: constant.character.escape.wolfram

  comments:
    - match: (\(\*\s*)(::(?:{{alnum}}+::)+)(\s*\*\))
      name: comment.line.cell.wolfram
      captures: !raw
        1: punctualation.definition.comment.begin.wolfram
        2: 
          patterns:
            - match: '{{alnum}}+'
              name: constant.language.style.wolfram
        3: punctualation.definition.comment.end.wolfram
    - include: '#comment-block'

  comment-block:
    - begin: \(\*
      end: \*\)
      name: comment.block.wolfram
      patterns: !push comment-block
  
  named-characters:
    - match: \\\[({{named_characters}})\]
      name: constant.character.built-in.wolfram
    - match: \\\[\w+\]
      name: invalid.character.built-in.wolfram
  
  literals:
    # numbers
    - match: !no-whitespace |-
        (?:
          ([1-9]\d*\^\^)                                  # base
          ((?:{{alnum}}+\.?|\.{{alnum}}){{alnum}}*)       # value
          |
          ({{number}})                                    # value
        )
        (?:
          (\`\`(?:{{number}})?)                           # accuracy
          |
          (\`(?:{{number}})?)                             # precision
        )?
        (\*\^[+-]?{{number}})?                            # exponent
      name: constant.numeric.wolfram
      captures: !raw
        1: constant.numeric.base.wolfram
        4: constant.numeric.accuracy.wolfram
        5: constant.numeric.precision.wolfram
        6: constant.numeric.exponent.wolfram

    # built-in symbols
    - match: !builtin numeric_constants
      name: constant.numeric.wolfram
    - match: !builtin built_in_constants
      name: constant.language.wolfram
    - match: !builtin built_in_undocumented_symbols
      name: support.undocumented-symbol.wolfram
    - match: !builtin built_in_options
      name: variable.parameter.wolfram

    # strings
    - begin: \"
      end: \"
      beginCaptures: !all punctuation.definition.string.begin.wolfram
      endCaptures: !all punctuation.definition.string.end.wolfram
      name: string.quoted.wolfram
      patterns: !push string

  string:
    # box representation
    - begin: \\!\\\(
      end: \\\)|(?=")
      name: meta.string-box.wolfram
      captures: !all keyword.operator.string-box.wolfram
      patterns:
        - include: '#string-nested'
        - include: '#boxed'

    # named characters
    - include: '#named-characters'

    # escape characters
    - include: '#newline-escape'
    - match: '{{escaped_character}}'
      name: constant.character.escape.wolfram
    - match: '{{encoded_character}}'
      name: constant.character.encoding.wolfram

    # invalid characters
    - match: |-
        (?x)
        \\[0-7]{1,2}(?=[^0-7])|
        \\\.[0-9A-Fa-f]?(?=[^0-9A-Fa-f])|
        \\:[0-9A-Fa-f]{0,3}(?=[^0-9A-Fa-f])
      name: invalid.character.encoding.wolfram
    - match: \\[a-zA-Z\[]
      name: invalid.character.escape.wolfram

  string-nested:
    - begin: \\\"
      end: \\\"
      beginCaptures: !all punctuation.definition.string.begin.wolfram
      endCaptures: !all punctuation.definition.string.end.wolfram
      name: string.quoted.wolfram
      patterns: !push string

  string-template:
    - match: \`\w*\`
      name: variable.parameter.wolfram
    - begin: <\*
      end: \*>|(?=")
      name: meta.template-expression.wolfram
      captures: !all keyword.operator.template-expression.wolfram
      patterns:
        - include: '#string-nested'
        - include: '#expressions'
    - include: '#string'

  xml-template:
    - match: (<wolfram:comment).*?(/>)
      name: comment.line.xml-template.wolfram
      captures: !raw
        1: punctualation.definition.comment.begin.wolfram
        2: punctualation.definition.comment.end.wolfram
    - begin: <wolfram:comment>
      end: </wolfram:comment>
      beginCaptures: punctualation.definition.comment.begin.wolfram
      endCaptures: punctualation.definition.comment.end.wolfram
      name: comment.block.xml-template.wolfram
    # FIXME: more wolfram XML patterns
    # FIXME: escape behaviour
    - include: text.xml
    - include: '#string-template'

  regular-expression:
    - match: \\\\[dDsSwW]
      name: storage.type.character.regexp.wolfram
    - match: (\[\^?\[)(:(?:{{character_class}}):)(\]\])
      captures: !raw
        1: storage.class.character.regexp.wolfram
        2: constant.other.class.regexp.wolfram
        3: storage.class.character.regexp.wolfram
    - match: \\\\g?[1-9]+
      name: storage.other.reference.regexp.wolfram
    - match: \(\?-?[ims]\)
      name: storage.modifier.mode.regexp.wolfram
    - match: \.
      name: keyword.other.any.regexp.wolfram
    - match: ([$^]|\\\\[bB])
      name: keyword.control.anchors.regexp.wolfram
    - match: \|
      name: keyword.operator.alternation.regexp.wolfram
    - match: ([?+*]|{[0-9]*,[0-9]+}|{[0-9]+,[0-9]*})
      name: keyword.other.qualifier.regexp.wolfram
    - begin: \[\^?
      end: \]
      captures: !all keyword.control.set.regexp.wolfram
      name: meta.set.regexp.wolfram
      patterns:
        - match: ({{regexp_character}})-({{regexp_character}})
          name: constant.other.range.regexp.wolfram
        - include: '#string'
    - begin: (\()(\?([:=!]|<[=!]))?
      beginCaptures: !raw
        1: keyword.control.group.regexp.wolfram
        2: constant.character.assertion.regexp.wolfram
      end: \)
      endCaptures: !all keyword.control.group.regexp.wolfram
      name: meta.group.regexp.wolfram
      patterns: !push regular-expression
    - match: \\\\[\S]
      name: constant.character.escape.regexp.wolfram
    - include: '#string'
  
  boxed:
    - match: \\[%&+_^]
      name: keyword.operator.x-scriptBox.wolfram
    - match: \\/
      name: keyword.operator.FractionBox.wolfram
    - match: \\@
      name: keyword.operator.SqrtBox.wolfram
    - match: \\`
      name: keyword.operator.FormBox.wolfram
    - match: \\\*
      name: keyword.operator.box-constructor.wolfram
    - include: '#expressions'
  
  # See: tutorial/OperatorInputForms
  shorthand:
    # Out
    - match: '%(\d*|%*)'
      name: storage.type.Out.wolfram

    # MessageName
    - begin: (::)\s*({{alnum}}+)\s*(:?=)\s*(")
      beginCaptures: !raw
        1: keyword.operator.MessageName.wolfram
        2: string.unquoted.wolfram
        3: keyword.operator.assignment.wolfram
        4: string.quoted.wolfram punctuation.definition.string.begin
      end: '"'
      endCaptures: !all string.quoted.wolfram punctuation.definition.string.end.wolfram
      contentName: string.quoted.wolfram
      patterns: !push string-template
    - match: (::)\s*({{alnum}}+)
      captures: !raw
        1: keyword.operator.MessageName.wolfram
        2: string.unquoted.wolfram
    
    # Get & Put & PutAppend
    - match: (<<|>>>?) *([a-zA-Z0-9`/.!-_:$*~?\\]+)(?=[\s\)\]\},;])
      captures: !raw
        1: keyword.operator.flow.wolfram
        2: string.unquoted.filename.wolfram

    # Infix
    - begin: '~'
      beginCaptures: !all keyword.operator.call.wolfram
      end: ({{identifier}})?\s*(~)
      endCaptures: !raw
        1: !function-identifier
        2: keyword.operator.call.wolfram
      name: meta.infix.wolfram
      patterns: !push expressions

    # Postfix & Composition & RightComposition
    - match: (//|[@/]\*)\s*({{identifier}})
      captures: !raw
        1: keyword.operator.call.wolfram
        2: !function-identifier
  
  # See: tutorial/Operators
  operators:
    # @     Prefix
    # @@    Apply
    # @@@   Apply
    # /@    Map
    # //@   MapAll
    # //    Postfix
    # ~     Infix
    # @*    Composition
    # /*    RightComposition
    - match: /[/@]|[/@]\*|@{1,3}|~
      name: keyword.operator.call.wolfram

    # /.    Replace
    # //.   ReplaceAll
    - match: \/\/?\.
      name: keyword.operator.replace.wolfram

    # >     Greater
    # <     Less
    # >=    GreaterEqual
    # <=    LessEqual
    # ==    Equal
    # !=    Unequal
    # ===   SameQ
    # =!=   UnsameQ
    - match: =?[=!]=|[<>]=|<(?!\|)|(?<!\|)>
      name: keyword.operator.comparison.wolfram

    # !     Not
    # ||    Or
    # &&    And
    - match: \|\||&&|!
      name: keyword.operator.logical.wolfram

    # =     Set
    # :=    SetDelayed
    # ^=    UpSet
    # ^:=   UpSetDelayed
    # /:    TagSet (TagUnset, TagSetDelayed)
    # =.    Unset
    # +=    AddTo
    # -=    SubtractFrom
    # *=    TimesBy
    # /=    DivideBy
    - match: \^?:?=|=.|/:|[+\-*/]=
      name: keyword.operator.assignment.wolfram
    
    # ->    Rule
    # :>    RuleDelayed
    # <->   TwoWayRule
    - match: <->|[-:]>
      name: keyword.operator.rule.wolfram
    
    # /;    Condition
    - match: \/;
      name: keyword.operator.condition.wolfram
    
    # +     Plus
    # -     Minus, Subtract
    # *     Multiply
    # /     Devide
    # ^     Power
    # ++    Increment, PreIncrement
    # --    Decrement, PreDecrement
    - match: \+\+|--|[+\-*/^]
      name: keyword.operator.arithmetic.wolfram
    
    # <<    Get
    # >>    Put
    # >>>   PutAppend
    - match: <<|>>>?
      name: keyword.operator.flow.wolfram
    
    # <>    StringJoin
    # ~~    StringExpression
    - match: <>|~~
      name: keyword.operator.string.wolfram
    
    # ..    Repeated
    # ...   RepeatedNull
    - match: \.\.\.?
      name: keyword.operator.repeat.wolfram
    
    # ;;    Span
    - match: ;;
      name: keyword.operator.span.wolfram
    
    # ;     CompoundExpression
    - match: ;
      name: keyword.operator.compound.wolfram
    
    # &     Function
    - match: '&'
      name: keyword.operator.function entity.name.function.wolfram
    
    # ?     Definition
    # ??    FullDefinition
    - match: \?\??
      name: keyword.operator.definition.wolfram
    
    - include: '#named-characters'

  patterns:
    - begin: ({{identifier}})\s*(:(?=[^:>=]))
      beginCaptures: !raw
        1: variable.parameter.wolfram
        2: keyword.operator.Pattern.wolfram
      end: (?={{pattern_ending}})
      name: meta.pattern.wolfram
      patterns: !push post-pattern

  post-pattern:
    - match: (\?)\s*({{identifier}}(?=\s*(:|{{pattern_ending}})))?
      captures: !raw
        1: keyword.operator.PatternTest.wolfram
        2: !function-identifier
    - match: :(?=[^:>=])
      name: keyword.operator.Optional.wolfram
    - include: '#no-pattern'

  function-identifier:
    - match: !builtin built_in_functions
      name: support.function.wolfram

  scoped-parameters:
    - begin: (?=[^}])
      end: (?=})|,
      endCaptures: !all punctuation.separator.sequence.wolfram
      contentName: meta.scoped-variable.wolfram
      patterns: !match-first
        - escapes: \},
        - begin: \s*({{identifier}})
          beginCaptures: !raw
            1: variable.parameter.wolfram

  functions:
    - !string-function
      type: string-template
      target: StringTemplate|TemplateApply
      context: !push string-template
    - !string-function
      type: xml-template
      target: XMLTemplate
      context: !push xml-template
    - !string-function
      type: regular-expression
      target: RegularExpression
      context: !push regular-expression
    
    - !function
      type: scoping
      target: Block|Module|With|DynamicModule
      context: !match-first
        - begin: \s*({)
          beginCaptures: !raw
            1: punctuation.section.braces.begin.wolfram
          end: (?=\])|}
          endCaptures: !all punctuation.section.braces.end.wolfram
          name: meta.braces.wolfram
          patterns: !push scoped-parameters
    - !function
      type: pure
      target: Function
      context: !match-first
        - begin: \s*({{identifier}})(?=\s*,)
          beginCaptures: !raw
            1: variable.parameter.wolfram
        - begin: \s*(\{)(?={{balanced_braces}}\}\s*,)
          beginCaptures: !raw
            1: punctuation.section.braces.begin.wolfram
          end: (?=\])|}
          endCaptures: !all punctuation.section.braces.end.wolfram
          name: meta.braces.wolfram
          patterns: !push scoped-parameters
    - !function
      type: complilation
      target: Compile
      context: !match-first
        - begin: \s*({)
          beginCaptures: !raw
            1: punctuation.section.braces.begin.wolfram
          end: \}
          endCaptures: !all punctuation.section.braces.end.wolfram
          name: meta.braces.wolfram
          patterns:
            - begin: (?=[^}])
              end: (?=})|,
              endCaptures: !all punctuation.separator.sequence.wolfram
              contentName: meta.scoped-variable.wolfram
              patterns: !match-first
                - escapes: \]},
                - begin: \s*({{identifier}})
                  beginCaptures: !raw
                    1: variable.parameter.wolfram
                - begin: \s*({)\s*({{identifier}})(?=\s*[,}])
                  beginCaptures: !raw
                    1: punctuation.section.braces.begin.wolfram
                    2: variable.parameter.wolfram
                  end: \}
                  endCaptures: !all punctuation.section.braces.end.wolfram
                  name: meta.braces.wolfram
    
    - !function
      type: functional-first-param
      target: '{{functional_first_param}}'
      context: !match-first
        - begin: \s*({{identifier}})(?=\s*[,\]])
          beginCaptures:
            1: !function-identifier
    - !function
      type: functional-last-param
      target: '{{functional_last_param}}'
      context:
        - match: \s*({{identifier}})(?=\s*\])
          captures:
            1: !function-identifier
        - begin: (?=[^\]])
          end: (?=\])
          patterns:
            - match: (,)\s*({{identifier}})(?=\s*\])
              captures: !raw
                1: punctuation.separator.sequence.wolfram
                2: !function-identifier
            - include: '#expressions'

    - !function
      target: '{{identifier}}'
      identifier: !function-identifier

    - match: ({{identifier}})\s*(?=@{1,3}|//?@|[/@]\*)
      captures:
        1: !function-identifier

  declarations:
    - match: ({{identifier}})(?=\s*:?=\s*Function\s*\[(?!\s*\[))
      captures:
        0: !function-identifier

  variables:
    # parameters
    - begin: !no-whitespace |-
        ({{identifier}})?
        (?:
          (_\.)               # Default
          |
          (_{1,3})            # Blank, BlankSequence, BlankNullSequence
          ({{identifier}})?   # Head
        )
      beginCaptures: !raw
        0: variable.parameter.wolfram
        2: variable.parameter.default.wolfram
        3: variable.parameter.blank.wolfram
        4: variable.parameter.head.wolfram
      end: (?={{pattern_ending}})
      contentName: meta.pattern.wolfram
      patterns: !push post-pattern

    # variables
    - include: '#function-identifier'
    - match: '{{identifier}}'
      name: variable.other.wolfram

    # slots
    - match: (#[a-zA-Z]{{alnum}}*|#\d*)
      name: variable.parameter.wolfram
  
  nested:
    - match: ','
      name: punctuation.separator.sequence.wolfram
    - !nested parens
    - !nested parts
    - !nested brackets
    - !nested braces
    - !nested association
    - begin: (\\!)?\\\(
      beginCaptures: !all punctuation.section.box.begin.wolfram
      end: \\\)
      endCaptures: !all punctuation.section.box.end.wolfram
      name: meta.box.wolfram
      patterns: !push boxed
