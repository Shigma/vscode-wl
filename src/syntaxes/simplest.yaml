name: Wolfram Language
scopeName: source.wolfram

variables:
  alnum: '[0-9a-zA-Z]'
  number: (?:\d+\.?|\.\d)\d*
  symbol: '[$a-zA-Z]+[$0-9a-zA-Z]*'
  identifier: '`?(?:{{symbol}}`)*{{symbol}}'
  pattern_ending: '[:-]>|:?=|\/[;.\/]|[\]\)\},;&]|>>|<<|[\n\r]'

patterns:
  - match: \A(#!).*(?=$)
    name: comment.line.shebang.wolfram
    captures: !raw
      1: punctuation.definition.comment.wolfram
  - include: '#expressions'

contexts:
  expressions:
    - include: '#newline-escape'
    - include: '#comment-block'
    - include: '#literals'
    - include: '#shorthand'
    - include: '#operators'
    - include: '#patterns'
    - include: '#functions'
    - include: '#variables'
    - include: '#bracketing'

  newline-escape:
    - match: \\\r?\n
      name: constant.character.escape.wolfram

  named-characters:
    - match: \\\[({{alnum}}+)\]
      name: constant.character.built-in.wolfram

  comment-block:
    - begin: \(\*
      end: \*\)
      name: comment.block.wolfram
      patterns: !push comment-block
  
  literals:
    # numbers
    - match: |-
        (?x)
        (?:
          ([1-9]\d*\^\^)                                  # base
          ((?:{{alnum}}+\.?|\.{{alnum}}){{alnum}}*)       # value
          |
          ({{number}})                                    # value
        )
        (?:
          (\`\`(?:{{number}})?)                           # accuracy
          |
          (\`(?:{{number}})?)                             # precision
        )?
        (\*\^[+-]?{{number}})?                            # exponent
      name: constant.numeric.wolfram
      captures: !raw
        1: constant.numeric.base.wolfram
        4: constant.numeric.accuracy.wolfram
        5: constant.numeric.precision.wolfram
        6: constant.numeric.exponent.wolfram

    # strings
    - begin: '"'
      end: '"'
      beginCaptures: !all punctuation.definition.string.begin.wolfram
      endCaptures: !all punctuation.definition.string.end.wolfram
      name: string.quoted.wolfram
      patterns:
        # named characters
        - include: '#named-characters'

        # escape characters
        - include: '#newline-escape'
        - match: \\[ !"%&()*+/@\\^_`bfnrt<>]
          name: constant.character.escape.wolfram

        # encoded characters
        - match: \\[0-7]{3}|\\\.[0-9A-Fa-f]{2}|\\:[0-9A-Fa-f]{4}
          name: constant.character.encoding.wolfram

        # invalid characters
        - match: |-
            (?x)
            \\[0-7]{1,2}(?=[^0-7])|
            \\\.[0-9A-Fa-f]?(?=[^0-9A-Fa-f])|
            \\:[0-9A-Fa-f]{0,3}(?=[^0-9A-Fa-f])
          name: invalid.character.encoding.wolfram
        - match: \\[a-zA-Z\[]
          name: invalid.character.escape.wolfram

  shorthand:
    # Out
    - match: (%\d+|%+)
      name: storage.type.Out.wolfram

    # MessageName
    - match: (::)\s*({{alnum}}+)
      captures: !raw
        1: keyword.operator.MessageName.wolfram
        2: string.unquoted.wolfram
    
    # Get & Put & PutAppend
    - match: (<<|>>>?) *([a-zA-Z0-9`/.!_:$*~?\\-]+) *(?=[\)\]\},;]|$)
      captures: !raw
        1: keyword.operator.flow.wolfram
        2: string.unquoted.filename.wolfram

    # Infix
    - begin: '~'
      beginCaptures: !all keyword.operator.call.wolfram
      end: ({{identifier}})?\s*(~)
      endCaptures: !raw
        1: '#function-identifier'
        2: keyword.operator.call.wolfram
      name: meta.infix.wolfram
      patterns: !push expressions

    # Postfix & Composition & RightComposition
    - match: (//|[@/]\*)\s*({{identifier}})
      captures: !raw
        1: keyword.operator.call.wolfram
        2: '#function-identifier'

    # At & Apply & Map & MapAll & Composition & RightComposition
    - match: ({{identifier}})\s*(?=@{1,3}|//?@|[/@]\*)
      captures: !raw
        1: '#function-identifier'
  
  operators:
    # /.    Replace
    # //.   ReplaceAll
    - match: \/\/?\.
      name: keyword.operator.replace.wolfram

    # @     Prefix
    # @@    Apply
    # @@@   Apply
    # /@    Map
    # //@   MapAll
    # //    Postfix
    # ~     Infix
    # @*    Composition
    # /*    RightComposition
    - match: //@?|[/@][@*]|@{1,3}|~
      name: keyword.operator.call.wolfram

    # >     Greater
    # <     Less
    # >=    GreaterEqual
    # <=    LessEqual
    # ==    Equal
    # !=    Unequal
    # ===   SameQ
    # =!=   UnsameQ
    - match: =?[=!]=|[<>]=|<(?!\|)|(?<!\|)>
      name: keyword.operator.comparison.wolfram

    # !     Not
    # ||    Or
    # &&    And
    - match: \|\||&&|!
      name: keyword.operator.logical.wolfram

    # =     Set
    # :=    SetDelayed
    # ^=    UpSet
    # ^:=   UpSetDelayed
    # /:    TagSet (TagUnset, TagSetDelayed)
    # =.    Unset
    # +=    AddTo
    # -=    SubtractFrom
    # *=    TimesBy
    # /=    DivideBy
    - match: \^?:?=|=.|/:|[+\-*/]=
      name: keyword.operator.assignment.wolfram
    
    # ->    Rule
    # :>    RuleDelayed
    # <->   TwoWayRule
    - match: <->|[-:]>
      name: keyword.operator.rule.wolfram
    
    # /;    Condition
    - match: \/;
      name: keyword.operator.condition.wolfram
    
    # ..    Repeated
    # ...   RepeatedNull
    - match: \.\.\.?
      name: keyword.operator.repeat.wolfram
    
    # +     Plus
    # -     Minus, Subtract
    # *     Multiply
    # /     Devide
    # ^     Power
    # .     Dot
    # '     Derivative
    # **    NonCommutativeMultiply
    # ++    Increment, PreIncrement
    # --    Decrement, PreDecrement
    - match: \+\+|--|\*\*|[+\-*/^.]|'+
      name: keyword.operator.arithmetic.wolfram
    
    # <<    Get
    # >>    Put
    # >>>   PutAppend
    - match: <<|>>>?
      name: keyword.operator.flow.wolfram
    
    # <>    StringJoin
    # ~~    StringExpression
    # |     Alternatives
    - match: <>|~~|\|
      name: keyword.operator.string.wolfram
    
    # ;;    Span
    - match: ;;
      name: keyword.operator.span.wolfram
    
    # ;     CompoundExpression
    - match: ;
      name: keyword.operator.compound.wolfram
    
    # &     Function
    - match: '&'
      name: keyword.operator.function.wolfram entity.name.function.wolfram
    
    # ?     Definition
    # ??    FullDefinition
    - match: \?\??
      name: keyword.operator.definition.wolfram
    
    - include: '#named-characters'

  patterns:
    # patterns
    - begin: ({{identifier}})\s*(:(?=[^:>=]))
      beginCaptures: !raw
        1: variable.parameter.wolfram
        2: keyword.operator.Pattern.wolfram
      end: (?={{pattern_ending}})
      name: meta.pattern.wolfram
      patterns: !push post-pattern

    # parameters
    - begin: |-
        (?x)
        ({{identifier}})?
        (?:
          (_\.)               # Default
          |
          (_{1,3})            # Blank, BlankSequence, BlankNullSequence
          ({{identifier}})?   # Head
        )
      beginCaptures: !raw
        0: variable.parameter.wolfram
        2: variable.parameter.default.wolfram
        3: variable.parameter.blank.wolfram
        4: variable.parameter.head.wolfram
      end: (?={{pattern_ending}})
      contentName: meta.pattern.wolfram
      patterns: !push post-pattern
    
  post-pattern:
    # PatternTest
    - match: (\?)\s*({{identifier}}(?=\s*(:|{{pattern_ending}})))?
      captures: !raw
        1: keyword.operator.PatternTest.wolfram
        2: '#function-identifier'

    # Optional
    - match: :(?=[^:>=])
      name: keyword.operator.Optional.wolfram
      
    - include: '#expressions'

  function-identifier:
    - match: (`?(?:{{symbol}}`)*){{symbol}}
      name: entity.name.function.wolfram
      captures: !raw
        1: entity.name.function.context.wolfram

  functions:
    - begin: ({{identifier}})\s*(\[(?!\[))
      beginCaptures: !raw
        1: '#function-identifier'
        2: meta.block.wolfram punctuation.section.brackets.begin.wolfram
      end: \]
      endCaptures: !all meta.block.wolfram punctuation.section.brackets.end.wolfram
      contentName: meta.block.wolfram
      patterns: !push expressions

  variables:
    # variables
    - match: (`?(?:{{symbol}}`)*){{symbol}}
      name: variable.other.wolfram
      captures: !raw
        1: variable.other.context.wolfram

    # slots
    - match: '#[a-zA-Z]{{alnum}}*|##?\d*'
      name: variable.parameter.slot.wolfram
  
  bracketing:
    - match: ','
      name: punctuation.separator.sequence.wolfram
    - !bracket parens
    - !bracket parts
    - !bracket brackets
    - !bracket braces
    - !bracket association

    # Box Forms
    - begin: (\\!)?\\\(
      beginCaptures: !all punctuation.section.box.begin.wolfram
      end: \\\)
      endCaptures: !all punctuation.section.box.end.wolfram
      name: meta.box.wolfram
      patterns:
        - match: \\[%&+_^]
          name: keyword.operator.x-scriptBox.wolfram
        - match: \\/
          name: keyword.operator.FractionBox.wolfram
        - match: \\@
          name: keyword.operator.SqrtBox.wolfram
        - match: \\`
          name: keyword.operator.FormBox.wolfram
        - match: \\\*
          name: keyword.operator.box-constructor.wolfram
        - include: '#expressions'
